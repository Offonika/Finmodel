# import_ozon_realization_v2_raw.py
# -------------------------------------------------------------------
# –°–∫–∞—á–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç Ozon /v2/finance/realization –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Excel
# –ü–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π, —Ñ–∞–π–ª —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
# -------------------------------------------------------------------

import os
import requests
import pandas as pd
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.styles import Font
from openpyxl.utils import get_column_letter

BASE_DIR    = os.path.dirname(os.path.abspath(__file__))
REPORT_DIR  = os.path.join(BASE_DIR, "reports")
os.makedirs(REPORT_DIR, exist_ok=True)

def fetch_raw_realization(client_id, api_key, year, month):
    url = "https://api-seller.ozon.ru/v2/finance/realization"
    headers = {
        "Client-Id": client_id,
        "Api-Key": api_key,
        "Content-Type": "application/json"
    }
    payload = {
        "month": month,
        "year": year
    }

    print(f"‚Üí –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month:02d}.{year}")
    response = requests.post(url, json=payload, headers=headers)
    response.raise_for_status()
    return response.json()["result"]["rows"]

def flatten_rows(rows):
    flat = []
    for r in rows:
        row = {
            "rowNumber": r.get("rowNumber"),
            "commission_ratio": r.get("commission_ratio"),
            "seller_price_per_instance": r.get("seller_price_per_instance")
        }

        item = r.get("item") or {}
        row.update({f"item_{k}": v for k, v in item.items()})

        delivery = r.get("delivery_commission") or {}
        row.update({f"delivery_{k}": v for k, v in delivery.items()})

        returns = r.get("return_commission") or {}
        row.update({f"return_{k}": v for k, v in returns.items()})

        flat.append(row)
    return pd.DataFrame(flat)

def translate_columns(df: pd.DataFrame):
    df.rename(columns={
        "rowNumber": "–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏",
        "commission_ratio": "–ö–æ–º–∏—Å—Å–∏—è (%)",
        "seller_price_per_instance": "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É",
        "item_sku": "SKU —Ç–æ–≤–∞—Ä–∞",
        "item_offer_id": "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "item_barcode": "–®—Ç—Ä–∏—Ö–∫–æ–¥",
        "item_name": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        "delivery_amount": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π",
        "delivery_bonus": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ë–æ–Ω—É—Å",
        "delivery_commission": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ö–æ–º–∏—Å—Å–∏—è",
        "delivery_compensation": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è",
        "delivery_price_per_instance": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É",
        "delivery_quantity": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ö–æ–ª-–≤–æ",
        "delivery_standard_fee": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ",
        "delivery_bank_coinvestment": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ö–æ–∏–Ω–≤–µ—Å—Ç. –±–∞–Ω–∫–∞",
        "delivery_stars": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ë–∞–ª–ª—ã",
        "delivery_pick_up_point_coinvestment": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –ö–æ–∏–Ω–≤–µ—Å—Ç. –ü–í–ó",
        "delivery_total": "–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –í—Å–µ–≥–æ",
        "return_amount": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π",
        "return_bonus": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –ë–æ–Ω—É—Å",
        "return_commission": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –ö–æ–º–∏—Å—Å–∏—è",
        "return_compensation": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è",
        "return_price_per_instance": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É",
        "return_quantity": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –ö–æ–ª-–≤–æ",
        "return_standard_fee": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ",
        "return_bank_coinvestment": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –ö–æ–∏–Ω–≤–µ—Å—Ç. –±–∞–Ω–∫–∞",
        "return_stars": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –ë–∞–ª–ª—ã",
        "return_pick_up_point_coinvestment": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –ö–æ–∏–Ω–≤–µ—Å—Ç. –ü–í–ó",
        "return_total": "–í–æ–∑–≤—Ä–∞—Ç ‚Äî –í—Å–µ–≥–æ"
    }, inplace=True)
    return df

def save_to_excel(df: pd.DataFrame, filename: str, sheet_name: str):
    path = os.path.join(REPORT_DIR, filename)
    df.to_excel(path, index=False, sheet_name=sheet_name)

    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ + –∂–∏—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    wb = load_workbook(path)
    ws = wb[sheet_name]
    for col in ws.columns:
        col_letter = get_column_letter(col[0].column)
        max_len = max((len(str(cell.value)) for cell in col if cell.value is not None), default=0)
        ws.column_dimensions[col_letter].width = min(max_len + 2, 70)
        col[0].font = Font(bold=True)
    wb.save(path)

    print(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {path}")

def main():
    print("=== –°—Ç–∞—Ä—Ç import_ozon_realization_v2_raw ===")

    # üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–µ—Ä–∏–æ–¥–∞:
    CLIENT_ID = "551025"
    API_KEY   = "52ba5ea1-7e09-406b-82c2-7fef7effdb81"
    YEAR  = 2025
    MONTH = 1

    try:
        rows = fetch_raw_realization(CLIENT_ID, API_KEY, YEAR, MONTH)
        if not rows:
            print("‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return

    df = flatten_rows(rows)
    df = translate_columns(df)

    filename = f"–û–∑–æ–Ω_–†–µ–∞–ª–∏–∑–∞—Ü–∏—è_{YEAR}_{MONTH:02d}.xlsx"
    sheet_name = "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è"

    save_to_excel(df, filename, sheet_name)

if __name__ == "__main__":
    main()
