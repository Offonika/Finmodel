# update_monthly_scenario_calc.py

import os
import xlwings as xw
import win32com.client
# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
EXCEL_PATH = os.path.join(BASE_DIR, 'Finmodel.xlsm')

# –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å
SHEET_NAMES = {
    'plan_sales': '–ü–ª–∞–Ω_–ü—Ä–æ–¥–∞–∂WB',
    'plan_rev': '–ü–ª–∞–Ω_–í—ã—Ä—É—á–∫–∏WB',
    'dict': '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_WB',
    'comm': '–ö–æ–º–∏—Å—Å–∏—èWB',
    'cfg': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    'cost': '–†–∞—Å—á—ë—Ç–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏',
    'result': '–†–∞—Å—á—ë—Ç–≠–∫–æ–Ω–æ–º–∏–∫–∏WB'
}

MONTHS = [f'–ú–µ—Å.{str(i+1).zfill(2)}' for i in range(12)]

def get_workbook():
    try:
        wb = xw.Book.caller()
        app = None
        from_caller = True
    except Exception:
        app = xw.App(visible=False)
        wb = app.books.open(EXCEL_PATH)
        from_caller = False
    return wb, app, from_caller

def idx_from_header(header_row):
    """–°—Ç—Ä–æ–∏—Ç —Å–ª–æ–≤–∞—Ä—å –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
    return {str(h).strip(): i for i, h in enumerate(header_row)}

def col_letter(n):
    s = ''
    while n > 0:
        n, r = divmod(n - 1, 26)
        s = chr(65 + r) + s
    return s

def to_num(val):
    try:
        if isinstance(val, (float, int)):
            return val
        val = str(val).replace('‚ÇΩ', '').replace('\xa0', '').replace(' ', '').replace(',', '.')
        return float(val) if val else 0
    except Exception:
        return 0

def get_workbook():
    try:
        wb = xw.Book.caller()
        app = None
        from_caller = True
        print(f'‚Üí –ó–∞–ø—É—Å–∫ –∏–∑ Excel (RunPython): {EXCEL_PATH}')
    except Exception:
        app = xw.App(visible=False)
        wb = app.books.open(EXCEL_PATH)
        from_caller = False
        print(f'‚Üí –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏, –æ—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {EXCEL_PATH}')
    return wb, app, from_caller

def main():
    import time
    start = time.time()
    print('‚è≥ [START] –°–∫—Ä–∏–ø—Ç —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')

    wb, app, from_caller = get_workbook()
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Å—Ç—ã
        available_sheets = {s.name: s for s in wb.sheets}
        sh = {}
        for key, sheet_name in SHEET_NAMES.items():
            if sheet_name in available_sheets:
                sh[key] = available_sheets[sheet_name]
            elif key == 'cost':
                sh[key] = wb.sheets.add(sheet_name)
                print(f'‚ûï –õ–∏—Å—Ç "{sheet_name}" —Å–æ–∑–¥–∞–Ω (–†–∞—Å—á—ë—Ç–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏)')
            elif key == 'result':
                sh[key] = wb.sheets.add(sheet_name)
                print(f'‚ûï –õ–∏—Å—Ç "{sheet_name}" —Å–æ–∑–¥–∞–Ω (–∏—Ç–æ–≥–æ–≤—ã–π)')
            else:
                print(f'‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç: {sheet_name}')
                return

        # 2. –ò–Ω–¥–µ–∫—Å—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        print('üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...')
        pIdx = idx_from_header(sh['plan_sales'].range(1, 1).expand('right').value)
        rIdx = idx_from_header(sh['plan_rev'].range(1, 1).expand('right').value)
        dIdx = idx_from_header(sh['dict'].range(1, 1).expand('right').value)
        cIdx = idx_from_header(sh['comm'].range(1, 1).expand('right').value)
        sIdx = idx_from_header(sh['cost'].range(1, 1).expand('right').value)

        # 3. –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤
        print('üìò –ß—Ç–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...')
        dicts = {}
        for r in sh['dict'].range(2, 1).expand('table').value:
            art = r[dIdx['–ê—Ä—Ç–∏–∫—É–ª_–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']]
            vol_cell = r[dIdx.get('–û–±—ä–µ–º_–ª–∏—Ç—Ä', -1)] if '–û–±—ä–µ–º_–ª–∏—Ç—Ä' in dIdx else ''
            try:
                volL = to_num(vol_cell) if vol_cell else (
                    float(r[dIdx['–®–∏—Ä–∏–Ω–∞']]) * float(r[dIdx['–í—ã—Å–æ—Ç–∞']]) * float(r[dIdx['–î–ª–∏–Ω–∞']]) / 1000
                    if all(k in dIdx for k in ('–®–∏—Ä–∏–Ω–∞', '–í—ã—Å–æ—Ç–∞', '–î–ª–∏–Ω–∞')) else 0)
            except Exception:
                volL = 0
            dicts[art] = {
                'subj': r[dIdx.get('–ü—Ä–µ–¥–º–µ—Ç', -1)] if '–ü—Ä–µ–¥–º–µ—Ç' in dIdx else '',
                'volL': volL
            }

        # 4. –ö–æ–º–∏—Å—Å–∏–∏
        print('üìä –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–∏—Å—Å–∏–π...')
        comm = {}
        for r in sh['comm'].range(2, 1).expand('table').value:
            subj = r[cIdx['Subject Name']]
            raw = str(r[cIdx['Commission, %']]).replace('%', '').replace(',', '.')
            if raw and raw != 'None':
                v = float(raw)
                comm[subj] = v / 100 if v > 1 else v

        # 5. –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        print('üì¶ –ß—Ç–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏...')
        cogs = {}
        for r in sh['cost'].range(2, 1).expand('table').value:
            key = f"{r[sIdx['–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è']]}|{r[sIdx['–ê—Ä—Ç–∏–∫—É–ª_–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']]}"
            cogs[key] = {
                'rub': round(to_num(r[sIdx['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å_—Ä—É–±']])),
                'rubWo': round(to_num(r[sIdx['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å_–±–µ–∑_–ù–î–°_—Ä—É–±']]))
            }

        # 6. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        print('‚öôÔ∏è –ß—Ç–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏...')
        last_row = sh['cfg'].range('A' + str(sh['cfg'].cells.last_cell.row)).end('up').row
        cfg_raw = sh['cfg'].range(f"A2:B{last_row}").value if last_row >= 2 else []
        cfg = {k: to_num(v) for k, v in cfg_raw if k}
        T_FIRST = cfg.get('–õ–æ–≥–∏—Å—Ç–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ç—Ä–∞', 60)
        T_NEXT  = cfg.get('–õ–æ–≥–∏—Å—Ç–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–∏—Ç—Ä–∞', 16)
        T_COEF  = cfg.get('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏', 115) / 100
        STORE   = cfg.get('–•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —à—Ç.', 20)
        DRR     = cfg.get('–î–†–†', 15) / 100

        # 7. –ü—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞
        print('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø—Ä–æ–¥–∞–∂ –∏ –≤—ã—Ä—É—á–∫–∏...')
        sales_data = sh['plan_sales'].range(2, 1).expand('table').value
        rev_data   = sh['plan_rev'].range(2, 1).expand('table').value

        # 8. –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
        print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–æ–∫...')
        out = []
        skipped = 0
        for rowIdx, ps in enumerate(sales_data):
            org = ps[pIdx['–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è']]
            art = ps[pIdx['–ê—Ä—Ç–∏–∫—É–ª_–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']]
            if not art or str(org).lower().startswith('–∏—Ç–æ–≥–æ'):
                continue

            meta  = dicts.get(art, {'subj': '', 'volL': 0})
            rate  = comm.get(meta['subj'], 0)
            pr    = rev_data[rowIdx]
            cKey  = f"{org}|{art}"
            unitC = cogs.get(cKey, {'rub': 0, 'rubWo': 0})
            if cKey not in cogs:
                print(f'Skip {art} ({org}) ‚Äì no COGS found')
                skipped += 1

            for idx, mKey in enumerate(MONTHS):
                qty = to_num(ps[pIdx.get(mKey, -1)]) if mKey in pIdx else 0
                if not qty:
                    continue
                rev = round(to_num(pr[rIdx.get(mKey, -1)])) if mKey in rIdx else 0

                perUnitLog = (T_FIRST + max(meta['volL'] - 1, 0) * T_NEXT) * T_COEF
                logiRub  = round(perUnitLog * qty)
                commRub  = round(rev * rate)
                advRub   = round(rev * DRR)
                expMP    = commRub + logiRub + STORE * qty + advRub

                out.append([
                    org, art, meta['subj'], str(idx + 1).zfill(2),
                    qty, rev, rate,
                    commRub, logiRub,
                    STORE * qty, advRub,
                    expMP,
                    unitC['rub']   * qty,
                    unitC['rubWo'] * qty
                ])

        print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞: {len(out)}')
        if skipped:
            print(f'Skipped items due to missing COGS: {skipped}')

        # 9. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å —É–º–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        hdr = [
            '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ê—Ä—Ç–∏–∫—É–ª_–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–ü—Ä–µ–¥–º–µ—Ç', '–ú–µ—Å—è—Ü',
            '–ö–æ–ª-–≤–æ, —à—Ç',  '–í—ã—Ä—É—á–∫–∞, ‚ÇΩ', '–ö–æ–º–∏—Å—Å–∏—è WB %', '–ö–æ–º–∏—Å—Å–∏—è WB, ‚ÇΩ',
            '–õ–æ–≥–∏—Å—Ç–∏–∫–∞, ‚ÇΩ','–•—Ä–∞–Ω–µ–Ω–∏–µ, ‚ÇΩ','–†–µ–∫–ª–∞–º–∞, ‚ÇΩ','–†–∞—Å—Ö–æ–¥—ã –ú–ü, ‚ÇΩ',
            '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å–ü—Ä–æ–¥–∞–∂–†—É–±', '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å–ü—Ä–æ–¥–∞–∂–ë–µ–∑–ù–î–°'
        ]

        def clean_number(x):
            if x is None or x == '':
                return 0
            try:
                return float(str(x).replace('‚ÇΩ', '').replace(' ', '').replace(',', '.'))
            except Exception:
                return 0

        rub_cols = [i for i, h in enumerate(hdr) if '‚ÇΩ' in h or '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å' in h]
        pct_col = next((i for i, h in enumerate(hdr) if '–ö–æ–º–∏—Å—Å–∏—è WB %' in h), None)

        cleaned_out = []
        for row in out:
            cleaned_row = []
            for i, v in enumerate(row):
                if i in rub_cols:
                    cleaned_row.append(clean_number(v))
                elif pct_col is not None and i == pct_col:
                    cleaned_row.append(clean_number(v))
                else:
                    cleaned_row.append(v)
            cleaned_out.append(cleaned_row)

        res = sh['result']
        res.clear()
        header_rng = res.range((1, 1), (1, len(hdr)))
        header_rng.value = hdr

        if cleaned_out:
            data_rng = res.range((2, 1), (len(cleaned_out) + 1, len(hdr)))
            data_rng.value = cleaned_out

        try:
            for tbl in res.api.ListObjects:
                if tbl.Name == '–†–∞—Å—Ö–æ–¥—ã–¢–∞–±–ª–∏—Ü–∞':
                    tbl.Delete()
        except Exception:
            pass

        last_row = len(cleaned_out) + 1
        last_col = len(hdr)
        table_range = res.range((1, 1), (last_row, last_col))
        lo = res.api.ListObjects.Add(
            SourceType=1,
            Source=table_range.api,
            XlListObjectHasHeaders=1
        )
        lo.Name = '–†–∞—Å—Ö–æ–¥—ã–¢–∞–±–ª–∏—Ü–∞'
        lo.TableStyle = 'TableStyleMedium7'

        for idx in rub_cols:
            c = idx + 1
            res.range((2, c), (last_row, c)).api.NumberFormat = '0 ‚ÇΩ'
        if pct_col is not None:
            c = pct_col + 1
            res.range((2, c), (last_row, c)).api.NumberFormat = '0%'

        total_row = last_row + 1
        res.range((total_row, 1)).value = '–ò–¢–û–ì–û'
        res.range((total_row, 1)).api.Font.Bold = True
        for c in [5, 6, 8, 9, 10, 11, 12, 13, 14]:
            col = col_letter(c)
            res.range((total_row, c)).formula = f'=SUBTOTAL(9,{col}2:{col}{total_row-1})'
            res.range((total_row, c)).api.Font.Bold = True
            res.range((total_row, c)).api.NumberFormat = '0 ‚ÇΩ'

        res.autofit()
        res.api.Rows.AutoFit()

        print('üü© –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ.')
        wb.save()
        print(f'üèÅ [FINISH] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {round(time.time() - start, 1)} —Å–µ–∫.')
        sheet = sh['result']
        sheet.api.Tab.Color = 5296274  # –Ω–∞—Å—ã—â–µ–Ω–Ω–æ-–∑–µ–ª—ë–Ω—ã–π

        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ª–∏—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º:
        # wb.sheets.move(sheet, after=wb.sheets[-1])

        # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ª–∏—Å—Ç –≤—Ç–æ—Ä—ã–º:
        sheet.api.Move(Before=wb.sheets[2].api)


        print('‚úÖ –¶–≤–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ –ª–∏—Å—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.')

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–∑ Excel
        if not from_caller and wb is not None:
            wb.close()
        if app is not None:
            app.quit()
            del app

if __name__ == '__main__':
    main()

    